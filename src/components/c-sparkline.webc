<script webc:setup>
	function getValues(string) {
		return string.split(",");
	}
	function maxDecimals(number, decimals = 2) {
		return +number.toFixed(decimals);
	}
	function getViewBox(string) {
		const values = getValues(string);
		return `0 0 ${values.length - 1} ${Math.max(...values) + 2}`;
	}
	function lineCommand(point, i) {
		return `L ${i},${point}`;
	}
	function line(ax, ay, bx, by) {
		const lengthX = bx - ax;
		const lengthY = by - ay;

		return {
			length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
			angle: Math.atan2(lengthY, lengthX),
		};
	}
	function controlPoint(cx, cy, px, py, nx, ny, reverse) {
		// When the current is the first or last point of the array, previous and
		// next don't exist. Replace with current.
		px = px || cx;
		py = py || cy;
		nx = nx || cx;
		ny = ny || cy;

		const smoothing = 0.2;

		const o = line(px, py, nx, ny);

		const angle = o.angle + (reverse ? Math.PI : 0);
		const length = o.length * smoothing;

		const x = cx + Math.cos(angle) * length;
		const y = cy + Math.sin(angle) * length;

		return [x, y];
	}
	function bezierCommand(point, i, a) {
		const [csx, csy] = controlPoint(
			i - 1,
			a[i - 1],
			i - 2,
			a[i - 2],
			i,
			point,
		);
		const [cex, cey] = controlPoint(
			i,
			point,
			i - 1,
			a[i - 1],
			i + 1,
			a[i + 1],
			true,
		);
		return `C ${maxDecimals(csx)},${maxDecimals(csy)} ${maxDecimals(cex)},${maxDecimals(cey)} ${i},${point}`;
	}
	function getPath(values, command = lineCommand) {
		return (
			getValues(values)
				// flips each point in the vertical range
				.map((point) => Math.max(...values) - point + 1)
				// generate a string
				.reduce((acc, point, i, a) => {
					return i < 1
						? `M 0,${point}`
						: `${acc} ${command(point, i, a)}`;
				}, "")
		);
	}
	function getFinalX(values) {
		return values.length - 1;
	}
	function getFinalY(values) {
		return Math.max(...values) - values[values.length - 1] + 1;
	}
	function getHighestY(values) {
		return Math.max(...values) + 2;
	}
</script>
<script webc:keep type="module" src="/js/components/svg-sparkline.js"></script>
<svg-sparkline
	webc:keep
	:values="this.values"
	:key-start="this['key-start'] || 25"
	:key-intervals="this['key-intervals'] || `2,1,2,2,1,2,2`"
	:key-limit="this['key-limit'] || 15"
	:animate="this.animate"
	:id="this.id"
	class="[ pentatonic ]"
	title="Click to hear me!"
>
	<span webc:if="this['start-label']" @text="this['start-label']"></span>
	<svg
		width="160px"
		height="28px"
		:viewBox="getViewBox(this.values)"
		preserveAspectRatio="none"
	>
		<defs webc:if="this.gradient && this.fill !== 'false'">
			<linearGradient id="gradient" gradientTransform="rotate(90)">
				<stop
					offset="0%"
					stop-color="oklch(from var(--color-raven) l c h / 50%)"
				/>
				<stop offset="100%" stop-color="transparent" />
			</linearGradient>
		</defs>
		<path
			webc:if="this.fill !== 'false'"
			class="[ spark-line__gradient ]"
			:d="`${getPath(this.values, this.curve ? bezierCommand : lineCommand)} L ${getFinalX(this.values)} ${getHighestY(this.values)} L 0 ${getHighestY(this.values)} Z`"
			:fill="this.gradient ? `url('#gradient')` : `oklch(from var(--color-raven) l c h / 50%)`"
			stroke="transparent"
		/>
		<path
			class="[ spark-line__line ]"
			:d="getPath(this.values, this.curve ? bezierCommand : lineCommand)"
			:stroke="this.color || `currentColor`"
			:stroke-width="this['stroke-width'] || 2"
			stroke-linecap="round"
			fill="transparent"
			vector-effect="non-scaling-stroke"
		/>
	</svg>
	<svg
		webc:if="this.point !== 'false'"
		width="160px"
		height="28px"
		viewBox="0 0 160 28"
		preserveAspectRatio="xMaxYMid meet"
	>
		<circle
			class="[ spark-line__endpoint ]"
			r="3"
			cx="160"
			:cy="(28 / getHighestY(this.values)) * getFinalY(this.values)"
			fill="var(--point, var(--color-maple))"
		></circle>
	</svg>
	<span webc:if="this['end-label']" @text="this['end-label']"></span>
</svg-sparkline>
