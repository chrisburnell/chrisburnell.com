////
/// Helpers
/// @group utilities
////

@use "../abstracts/mixins";
@use "../generated/tokens";

// Full Bleed
.full-bleed {
	inline-size: 100vi;
	margin-inline-start: 50%;
	transform: translateX(-50%);
}

// Limit inline-size to line-length
.line-length {
	max-inline-size: var(--max-inline-size, var(--size-line-length)) !important;
}

// Make anything top sticky
.sticky {
	position: sticky;
	inset-block-start: var(--size-header, 0px);
	z-index: var(--z-index-default);
}

// <abbr class="acronym" title="National Aeronautics and Space Administration">Nasa</abbr>
// This allows screen readers to read aloud acronyms as they would be spoken, as
// opposed to an initialism, for which each letter is spoken individually,
// (e.g. HTML, CSS).
.acronym,
.uppercase {
	text-transform: uppercase;
}

// Break text on any character
.break-anywhere {
	word-wrap: anywhere;
}

// Prevent text wrapping
.no-wrap {
	white-space: nowrap;
}

// Hyphenate any looooooooooooooooooooo-
// oooooong text
.hyphen,
.hyphenate {
	@include mixins.hyphenate;
}

// Make things non-selectable
.non-selectable {
	@include mixins.non-selectable;
}

// Make things non-interactive
.non-interactive {
	@include mixins.non-interactive;
}

// Turn off motion (for reduced-motion-like cases)
.non-motion {
	animation-play-state: paused !important;
	transition: none !important;
	scroll-behavior: auto !important;
}

// Hide things which require motion when prefers-reduced-motion is on
.requires-motion {
	@media (prefers-reduced-motion: reduce) {
		display: none;
	}
}

// Hide things when prefers-reduced-motion is off
.requires-static {
	@media (prefers-reduced-motion: no-preference) {
		display: none;
	}
}

.sans {
	font-family: var(--font-family-sans);
}

.serif {
	font-family: var(--font-family-serif);
}

.monospace {
	font-family: var(--font-family-monospace);
}

// Make text serifed and italicised
.fancy {
	font-family: var(--font-family-serif);
	@include mixins.italic;
}

// For salty/silly remarks
.salty,
.silly {
	font-family: var(--font-family-silly) !important;
}

.center {
	text-align: center;
	align-items: center;
	justify-content: center;

	// just to be sure, and to override
	& > * {
		align-self: center;
		justify-self: center;
	}
}

.inline-center {
	margin-inline: auto;
}

.sideways {
	writing-mode: vertical-lr;
}

.overflow {
	overflow: visible !important;
}

// Shadows
.shadow,
.shadow--medium {
	box-shadow: var(--box-shadow, var(--box-shadow-medium));
}
.shadow--low {
	--box-shadow: var(--box-shadow-low);
}
.shadow--high {
	--box-shadow: var(--box-shadow-high);
}

// Emoji
.emoji {
	font-family: var(--font-family-sans);
	font-style: normal;
	font-variation-settings: normal;
	font-variant-emoji: emoji;
	vertical-align: middle;
	margin-block-start: calc(1ex - 1cap);
	text-shadow: none;

	:is(a:not(.button), .anchor):not(.icon-anchor) > &:first-child,
	:is(button:not(.anchor), .button, [type="button"], [role="tab"]):not(
			.icon-anchor
		)
		> &:first-child {
		display: inline-block;
		padding-inline-end: 0.625ch;
	}

	& svg {
		vertical-align: middle;
		margin-block-start: calc(1ex - 1cap);

		&:not([width], [height]) {
			max-inline-size: 1em;
			max-block-size: 1em;
		}
	}
}

// Sorting labels
[data-sort][aria-sort="ascending"]::after {
	content: "​ ↑ ​";
}
[data-sort][aria-sort="descending"]::after {
	content: "​ ↓ ​";
}

// Limit lines
.line-clamp {
	display: -webkit-box;
	-webkit-line-clamp: var(--line-clamp);
	-webkit-box-orient: vertical;
	overflow: hidden;
}

// Animation for transitioning from user-select:all; to user-select:text;
:is(
	pre[class*="language-"] code[tabindex="0"],
	pre:not(:has(code)),
	.clamp-calculator__result
) {
	user-select: all;

	&:focus {
		animation: selectall var(--transition-duration-short) step-end forwards;
	}
}
@keyframes selectall {
	to {
		user-select: text;
	}
}

// Dangerous! Be careful how you use this!
.contents-only {
	display: contents;
}

// Speedlify
.speedlify-anchor {
	display: inline-block;
	margin-block-start: var(--size-small);
	text-decoration: none;
}

// Disable things which require JS when JS is not available
.no-js .requires-js {
	display: none !important;
}

// Turn things off for the feed page
.feed .no-feed {
	display: none !important;
}

// Remove things from the print layout
.no-print {
	@media print {
		display: none !important;
	}
}

// Set an appropriately-accessible text colour for each colour in the palette
// TODO: Uses "pseudo" color-contrast() using relative color syntax until
// color-contrast() has more widespread adoption
@each $name, $_ in tokens.$colors {
	.background--#{$name} {
		background-color: var(--color-#{$name});
		color: oklch(
			from var(--color-#{$name})
				calc(
					(1 - round(l)) *
						var(--snowy-lightness) +
						round(l) *
						var(--thunder-lightness)
				)
				var(--monochrome-chroma)
				var(--monochrome-hue)
		);
		// color: color-contrast(var(--color-#{$name}) vs var(--contrast-list) to var(--contrast-ratio));
	}
}
:is(.background--conifer, .background--maple, .background--nickel) {
	color: var(--color-snowy);
}

.size-example {
	background-color: var(--color-raven);
	display: block;
	box-shadow: inset 0 0 0 var(--size-border-thin) currentColor;
}
@each $name, $_ in tokens.$sizes {
	.size-example--#{$name} {
		inline-size: var(--size-#{$name});
		block-size: var(--size-#{$name});
	}
}

// Scroll & Shadows

.scroll-inline {
	overflow-x: auto !important;
}
.scroll-inline-shadow {
	animation: inline-shadow-inside linear;
	animation-timeline: scroll(self inline);
	scroll-timeline-name: --scrollInline;
	scroll-timeline-axis: inline;
}
.scroll-block {
	max-block-size: calc(100vb - (var(--size-header, 0px) * 2));
	max-block-size: calc(100dvb - (var(--size-header, 0px) * 2));
	overflow-y: auto !important;
}
.scroll-block-shadow {
	animation: block-shadow-inside linear;
	animation-timeline: scroll(self block);
	scroll-timeline-name: --scrollBlock;
	scroll-timeline-axis: block;
}

@keyframes block-shadow-inside {
	from {
		box-shadow: inset 0 -2em 2em -2em
			oklch(from var(--color-shadow) l c h / 40%);
	}
	to {
		box-shadow: inset 0 2em 2em -2em
			oklch(from var(--color-shadow) l c h / 40%);
	}
}
@keyframes inline-shadow-inside {
	from {
		box-shadow: inset -2em 0 2em -2em
			oklch(from var(--color-shadow) l c h / 40%);
	}
	to {
		box-shadow: inset 2em 0 2em -2em
			oklch(from var(--color-shadow) l c h / 40%);
	}
}
@keyframes block-shadow-outside {
	from {
		box-shadow: none;
	}
	to {
		box-shadow: 0 2em 2em -2em oklch(from var(--color-shadow) l c h / 40%);
	}
}
@keyframes inline-shadow-outside {
	from {
		box-shadow: none;
	}
	to {
		box-shadow: 2em 0 2em -2em oklch(from var(--color-shadow) l c h / 40%);
	}
}

// Scroll Snapping
html:has(.full-space) {
	@media (prefers-reduced-motion: no-preference) and (width > 700px) {
		scroll-snap-type: y mandatory;
	}
}
.full-space {
	min-block-size: 100dvh;
	display: grid;
	place-content: center;
	padding: var(--size-large-gigantic);

	@media (prefers-reduced-motion: no-preference) and (width > 700px) {
		scroll-snap-align: start;
	}
}

// Low Quality Image Previews (LQIP)
[style*="--my-lqip:"]:is(:not(img), img[loading="lazy"], .force-my-lqip) {
	--lqip-ca: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 18))),
		4
	);
	--lqip-cb: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 16))),
		4
	);
	--lqip-cc: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 14))),
		4
	);
	--lqip-cd: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 12))),
		4
	);
	--lqip-ce: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 10))),
		4
	);
	--lqip-cf: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 8))),
		4
	);
	--lqip-ll: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 6))),
		4
	);
	--lqip-aaa: mod(
		round(down, calc((var(--my-lqip) + pow(2, 19)) / pow(2, 3))),
		8
	);
	--lqip-bbb: mod(calc(var(--my-lqip) + pow(2, 19)), 8);

	--lqip-ca-clr: hsl(0 0% calc(var(--lqip-ca) / 3 * 60% + 20%));
	--lqip-cb-clr: hsl(0 0% calc(var(--lqip-cb) / 3 * 60% + 20%));
	--lqip-cc-clr: hsl(0 0% calc(var(--lqip-cc) / 3 * 60% + 20%));
	--lqip-cd-clr: hsl(0 0% calc(var(--lqip-cd) / 3 * 60% + 20%));
	--lqip-ce-clr: hsl(0 0% calc(var(--lqip-ce) / 3 * 60% + 20%));
	--lqip-cf-clr: hsl(0 0% calc(var(--lqip-cf) / 3 * 60% + 20%));
	--lqip-base-clr: oklab(
		calc(var(--lqip-ll) / 3 * 0.6 + 0.2)
			calc(var(--lqip-aaa) / 8 * 0.7 - 0.35)
			calc((var(--lqip-bbb) + 1) / 8 * 0.7 - 0.35)
	);

	--lqip-stop10: 2%;
	--lqip-stop20: 8%;
	--lqip-stop30: 18%;
	--lqip-stop40: 32%;
	background-blend-mode:
		hard-light, hard-light, hard-light, hard-light, hard-light, hard-light,
		normal;
	background-image:
		radial-gradient(
			50% 75% at 16.67% 25%,
			var(--lqip-ca-clr),
			rgb(from var(--lqip-ca-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-ca-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-ca-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-ca-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-ca-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-ca-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-ca-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-ca-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		radial-gradient(
			50% 75% at 50% 25%,
			var(--lqip-cb-clr),
			rgb(from var(--lqip-cb-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-cb-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-cb-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-cb-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-cb-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-cb-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-cb-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-cb-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		radial-gradient(
			50% 75% at 83.33% 25%,
			var(--lqip-cc-clr),
			rgb(from var(--lqip-cc-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-cc-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-cc-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-cc-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-cc-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-cc-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-cc-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-cc-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		radial-gradient(
			50% 75% at 16.67% 75%,
			var(--lqip-cd-clr),
			rgb(from var(--lqip-cd-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-cd-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-cd-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-cd-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-cd-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-cd-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-cd-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-cd-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		radial-gradient(
			50% 75% at 50% 75%,
			var(--lqip-ce-clr),
			rgb(from var(--lqip-ce-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-ce-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-ce-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-ce-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-ce-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-ce-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-ce-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-ce-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		radial-gradient(
			50% 75% at 83.33% 75%,
			var(--lqip-cf-clr),
			rgb(from var(--lqip-cf-clr) r g b / calc(100% - var(--lqip-stop10)))
				10%,
			rgb(from var(--lqip-cf-clr) r g b / calc(100% - var(--lqip-stop20)))
				20%,
			rgb(from var(--lqip-cf-clr) r g b / calc(100% - var(--lqip-stop30)))
				30%,
			rgb(from var(--lqip-cf-clr) r g b / calc(100% - var(--lqip-stop40)))
				40%,
			rgb(from var(--lqip-cf-clr) r g b / calc(var(--lqip-stop40))) 60%,
			rgb(from var(--lqip-cf-clr) r g b / calc(var(--lqip-stop30))) 70%,
			rgb(from var(--lqip-cf-clr) r g b / calc(var(--lqip-stop20))) 80%,
			rgb(from var(--lqip-cf-clr) r g b / calc(var(--lqip-stop10))) 90%,
			transparent
		),
		linear-gradient(0deg, var(--lqip-base-clr), var(--lqip-base-clr));
}
