////
/// Dark
/// @group themes
////

@mixin color-scheme-dark() {
	--shadow-color: var(--hsl-shadow-dark);

	// Target these if applied to html or body elements
	&:is(body),
	&:is(html) body {
		background-color: h(mineshaft);
		color: h(milou);
		scrollbar-color: h(raven) h(mineshaft);
	}

	.header,
	.main {
		background-color: h(bowhead, beta);
		color: h(milou);
	}

	.main {
		background-color: h(mineshaft);
	}

	.footer {
		background-image: linear-gradient(to bottom, h(thunder, gamma), h(thunder, gamma));
	}

	%anchor {
		color: h(highland);

		&:not(:is(:hover, :focus, :active)) {
			text-decoration-color: h(kaiser);
		}
	}

	h2 %anchor {
		color: inherit !important;

		&:not(:is(:hover, :focus, :active)) {
			text-decoration-color: transparent;
		}
	}

	hr {
		background-color: h(alto, beta);
	}

	:is(abbr, dfn)[title],
	figure > a figcaption,
	blockquote cite,
	.breadcrumbs,
	.fragment-anchor {
		color: h(alto);
	}

	:is(blockquote, code, samp, kbd) {
		background-color: h(coyote, gamma);
	}

	ins {
		background-color: h(conifer);
	}

	pre[class*="language-"] {
		background-color: h(thunder);
	}

	.box,
	%box {
		background-color: var(--background-color, h(bear, delta));
		border-block-start-color: var(--border-color, h(raven, alpha));
	}

	var,
	.box %anchor,
	%box %anchor {
		color: h(highland);
	}

	dialog {
		background-color: h(lynx);
	}

	.librarian {
		background-color: mix(map-get($colors, thunder), map-get($colors, mineshaft), map-get($opacities, delta) * 100%);
	}

	.rating {
		&::before {
			color: h(kaiser);
		}

		&::after {
			color: h(alto);
		}
	}

	:is(ol, ul):not([class]),
	.breadcrumbs {
		li {
			&::marker {
				color: h(alto);
			}
		}
	}

	th:not(:empty) {
		background-color: h(kaiser);
	}

	.table-of-contents {
		$background: mix(map-get($colors, "milou"), map-get($colors, "mineshaft"), map-get($opacities, "delta") * 100%);
		// prettier-ignore
		background: linear-gradient(#{$background} 30%, transparent),
		linear-gradient(transparent, #{$background} 70%) 0 100%,
		radial-gradient(farthest-side at 50% 0, #{h(milou, gamma)}, transparent),
		radial-gradient(farthest-side at 50% 100%, #{h(milou, gamma)}, transparent) 0 100%;
		background-color: #{$background};

		li {
			&::marker {
				color: h(alto);
			}
		}
	}

	[aria-labelledby="worked-with"] {
		img {
			filter: brightness(1.25);
		}
	}
}

@include media("dark") {
	html:not([data-color-scheme]) {
		@include color-scheme-dark;
	}
}

[data-color-scheme="dark"],
.dark {
	@include color-scheme-dark;
}
