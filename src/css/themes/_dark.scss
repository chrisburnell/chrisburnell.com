////
/// Dark
/// @group themes
////

@mixin theme-dark() {
	--shadow-color: var(--hsl-shadow-dark);

	&:is(html) {
		scrollbar-color: h(raven) h(mineshaft);
	}

	// Target these if applied to html or body elements
	&:is(body),
	&:is(html) body {
		background-color: h(mineshaft);
		color: h(snowy);
	}

	// Header Block
	.header {
		background-color: mix(map-get($colors, mineshaft), map-get($colors, bear), (1 - map-get($opacities, delta)) * 100%);
		color: h(snowy);
	}

	// Main Block
	.main {
		background-color: h(mineshaft);
		color: h(snowy);
	}

	// Footer Block
	.footer {
		background-image: linear-gradient(to bottom, h(thunder, gamma), h(thunder, gamma));
	}

	// Anchor Global
	%anchor {
		color: h(highland);

		&:not(:is(:hover, :focus, :active)) {
			text-decoration-color: h(kaiser);
		}
	}

	///
	// Global Content Elements
	///

	:is(blockquote, code, samp, kbd) {
		background-color: h(coyote, gamma);
	}

	ins {
		background-color: h(conifer);
	}

	pre[class*="language-"] {
		background-color: h(thunder);
	}

	input,
	textarea {
		background-color: h(thunder);
		color: h(snowy);
		border-color: h(kaiser);

		&:hover {
			border-color: h(bowhead);
		}
	}

	var {
		color: h(highland);
	}

	hr {
		background-color: h(yeti, beta);
	}

	dialog {
		background-color: h(lynx);
	}

	th:not(:empty) {
		background-color: h(kaiser);
	}

	///
	// Global and Block Content Elements
	///

	:is(ol, ul):not([class]),
	.breadcrumbs {
		li {
			&::marker {
				color: h(yeti);
			}
		}
	}

	:is(abbr, dfn)[title],
	figure > a figcaption,
	blockquote cite,
	.breadcrumbs,
	.fragment-anchor {
		color: h(yeti);
	}

	///
	// Compositions
	///

	.box,
	%box {
		background-color: var(--background-color, h(bear, delta));
		border-block-start-color: var(--border-color, h(raven, alpha));
	}

	.box %anchor,
	%box %anchor {
		color: h(highland);
	}

	.librarian {
		--background-color: #{mix(map-get($colors, thunder), map-get($colors, mineshaft), map-get($opacities, delta) * 100%)};
	}

	.rating {
		--rating-background-color: #{h(kaiser)};
		--rating-color: #{mix(map-get($colors, thunder), map-get($colors, aspen), map-get($opacities, gamma) * 100%)};
	}

	.browse__previous,
	.browse__next {
		&:not(:is(:hover, :focus, :active)) {
			&::before {
				color: h(yeti);
			}
		}
	}

	.table-of-contents {
		li {
			&::marker {
				color: h(yeti);
			}
		}
	}

	///
	// Exceptions
	///

	[aria-labelledby="worked-with"] {
		img {
			filter: brightness(1.25);
		}
	}
}

// Apply the Dark color scheme when the media query matches
@media (prefers-color-scheme: dark) {
	html:not([data-theme]) {
		@include theme-dark;
	}
}

// Apply the Dark color scheme when it has been set manually (visitor, author)
[data-theme*="dark"],
.dark {
	@include theme-dark;
}
