////
/// Dark
/// @group themes
////

@mixin theme-dark() {
	scrollbar-color: h(raven) h(mineshaft);
	color-scheme: dark;

	&:is(body),
	&:is(html) body,
	&.themed-section,
	main {
		background-color: color-mix(in oklab, h(mineshaft), h(wolf) 40%);
		color: h(yeti);
	}

	// Set some special dark backgrounds
	:is(.header, [popover], .footer, %box, .table) {
		background-color: var(--background-color, color-mix(in oklab, h(thunder), h(mineshaft) 80%));
	}

	// Header Block
	.header {
		color: h(yeti);
	}

	// Anchor Global
	%anchor {
		color: h(highland);
	}
	// Anchor & Summary
	%anchor,
	summary {
		&:not(:hover, :focus, :active) {
			text-decoration-color: h(kaiser);
		}
	}

	///
	// Global Content Elements
	///

	h2 {
		box-shadow: inset 0 calc(-1 * var(--size-border-thin)) 0 h(nickel);
	}

	:is(blockquote, code, samp, kbd) {
		background-color: h(coyote, gamma);
	}

	pre[class*="language-"] {
		background-color: h(thunder);
	}

	input,
	select,
	textarea {
		background-color: h(thunder);
		color: h(yeti);
		border-color: h(kaiser);

		&:hover {
			border-color: h(bowhead);
		}
	}

	select {
		background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='50' fill='%23dddddd'><polygon points='0,0 100,0 50,50'/></svg>");
	}

	var {
		color: h(highland);
	}

	hr {
		background-color: h(yeti, beta);
	}

	th:not(:empty) {
		background-color: h(mineshaft);
	}

	///
	// Global and Block Content Elements
	///

	:is(ol, ul):not([class]),
	.breadcrumbs {
		li {
			&::marker {
				color: h(yeti);
			}
		}
	}

	figure > a figcaption,
	blockquote cite,
	.breadcrumbs,
	.fragment-anchor {
		color: h(yeti);
	}

	.title:not(.title--positive, .title--negative) .p-name,
	.navigation__list a {
		@media not print {
			background-image: linear-gradient(to bottom, var(--color-snowy), var(--color-highland));
		}
	}

	///
	// Compositions
	///

	%box,
	&.box {
		border-block-start-color: var(--box-border-color, h(raven, alpha));

		%anchor {
			color: h(highland);

			&:active {
				color: h(snowy); // maintain contrast
			}
		}
	}
	.box--success {
		background-color: color-mix(in oklab, h(mineshaft), h(conifer) 10%);
		--box-border-color: #{h(conifer)};
	}

	.box--warning {
		background-color: color-mix(in oklab, h(mineshaft), h(aspen) 10%);
		--box-border-color: #{h(aspen)};
	}

	.box--error {
		background-color: color-mix(in oklab, h(mineshaft), h(maple) 10%);
		--box-border-color: #{h(maple)};
	}

	.rating {
		--rating-background-color: #{h(kaiser)};
	}

	.browse__previous,
	.browse__next {
		&:not(:hover, :focus, :active) {
			&::before {
				color: h(yeti);
			}
		}
	}

	.table-of-contents {
		li {
			&::marker {
				color: h(yeti);
			}
		}
	}

	.dark-invert-colors {
		filter: invert(1) hue-rotate(180deg);
	}

	// For some reason, ::selection and ::target-text don't play well together
	::selection {
		background-color: h(highland);
		color: h(mineshaft);
	}
	::target-text {
		background-color: h(highland);
		color: h(mineshaft);
	}
}

// Apply the Dark color scheme when the media query matches
@media (prefers-color-scheme: dark) {
	:root:not(:has([name="color-scheme"] [value*="light"]:checked), .light, [data-color-scheme*="light"]) {
		@media not print {
			@include theme-dark;
		}
	}
}

// Apply the Dark color scheme when it has been set manually (visitor, author)
:root:has([name="color-scheme"] [value*="dark"]:checked):not(.light, [data-color-scheme*="light"]),
[data-color-scheme*="dark"],
.dark {
	@media not print {
		@include theme-dark;
	}
}
