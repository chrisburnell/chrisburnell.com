////
/// Mixins
/// @group abstracts
////

@use "sass:map";
@use "../generated/tokens";
@use "collections";
@use "functions";

///
/// Visually hide an element properly.
///
@mixin visually-hidden() {
	inline-size: 1px !important;
	block-size: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	border: 0 !important;
	overflow: hidden !important;
	position: absolute !important;
	white-space: nowrap !important;
	clip: rect(0 0 0 0) !important;
	clip-path: inset(100%) !important;
}

///
/// Nest an inline-size-based container query.
///
@mixin cqi($name, $min: null, $max: null) {
	@if $min and $max {
		@container #{$name} (#{map.get(tokens.$breakpoints, $min)} < inline-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else if $max {
		@container #{$name} (inline-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else {
		@container #{$name} (inline-size > #{map.get(tokens.$breakpoints, $min)}) {
			@content;
		}
	}
}

///
/// Nest an block-size-based container query.
///
@mixin cqb($name, $min: null, $max: null) {
	@if $min and $max {
		@container #{$name} (#{map.get(tokens.$breakpoints, $min)} < block-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else if $max {
		@container #{$name} (block-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else {
		@container #{$name} (block-size > #{map.get(tokens.$breakpoints, $min)}) {
			@content;
		}
	}
}

///
/// Target Media Queries which should nullify animations/transitions/etc.
///
@mixin reduced-motion {
	@media (prefers-reduced-motion: reduce) or (update: none) or (update: slow) {
		@content;
	}
}

///
/// Target Media Queries which allow animations/transitions/etc.
///
@mixin allowed-motion {
	@media (prefers-reduced-motion: no-preference) and (update: fast) {
		@content;
	}
}

///
/// Iralicise words..
///
@mixin italic() {
	font-style: italic;
	font-synthesis: none;
	font-variation-settings: "ital" 125;
}

///
/// Hyphenate words.
///
@mixin hyphenate() {
	hyphens: auto;
	hyphenate-limit-chars: 6 3 3;
	hyphenate-limit-lines: 2;
	hyphenate-limit-last: always;
	hyphenate-limit-zone: 8%;
}

///
/// Make something non-selectable.
///
@mixin non-selectable() {
	user-select: none;
	-webkit-touch-callout: default;
	-webkit-touch-callout: none;
}

///
/// Make something non-interactive.
///
@mixin non-interactive() {
	@include non-selectable;
	pointer-events: none;
}

///
/// Setup Monochrome Color CSS Variables
///
@mixin setup-monochrome-colors() {
	--color-snowy: oklch(var(--snowy-lightness) var(--monochrome-chroma) var(--monochrome-hue));
	--color-thunder: oklch(var(--thunder-lightness) var(--monochrome-chroma) var(--monochrome-hue));
	--color-mineshaft: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 83.6%);
	--color-kaiser: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 66.6%);
	--color-nickel: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 51.8%);
	--color-yeti: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 10.2%);
}

///
/// Setup Raven Color CSS Variables
///
@mixin setup-raven-colors() {
	--color-raven: oklch(var(--raven-lightness) var(--raven-chroma) var(--raven-hue));
	--color-lynx: color-mix(in oklab, var(--color-raven), var(--color-thunder) 75%);
	--color-wolf: color-mix(in oklab, var(--color-raven), var(--color-thunder) 54%);
	--color-bowhead: color-mix(in oklab, var(--color-raven), var(--color-thunder) 33%);
	--color-highland: color-mix(in oklab, var(--color-raven), var(--color-snowy) 33%);
	--color-coyote: color-mix(in oklab, var(--color-raven), var(--color-snowy) 54%);
	--color-bear: color-mix(in oklab, var(--color-raven), var(--color-snowy) 75%);
}

///
/// Dark Theme
///
@mixin theme-dark() {
	& {
		--color-shadow: var(--color-shadow-dark);

		scrollbar-color: functions.h(raven) functions.h(mineshaft);
		color-scheme: dark;
	}

	&:is(body),
	&:is(html) body,
	&.themed-section,
	main {
		background-color: color-mix(in oklab, functions.h(mineshaft), functions.h(wolf) 40%);
		color: functions.h(yeti);
	}

	// Set some special dark backgrounds
	:is(.header, dialog, [popover], .footer, #{collections.$box}, .table) {
		background-color: var(--background-color, color-mix(in oklab, functions.h(thunder), functions.h(mineshaft) 80%));
	}

	// Header Block
	.header {
		color: functions.h(yeti);
	}

	// Anchor Global
	#{collections.$anchor} {
		color: functions.h(highland);
	}
	// Anchor & Summary
	#{collections.$anchor},
	summary {
		&:not(:hover, :focus, :active) {
			text-decoration-color: functions.h(kaiser);
		}
	}

	///
	// Global Content Elements
	///

	:is(blockquote, code, samp, kbd) {
		background-color: functions.h(raven, gamma);
	}

	pre[class*="language-"] {
		background-color: functions.h(thunder);
	}

	input,
	select,
	textarea {
		background-color: functions.h(thunder);
		color: functions.h(yeti);
		border-color: functions.h(kaiser);

		&:hover {
			border-color: functions.h(bowhead);
		}
	}

	select {
		background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='50' fill='%23dddddd'><polygon points='0,0 100,0 50,50'/></svg>");
	}

	var {
		color: functions.h(highland);
	}

	th:not(:empty) {
		background-color: functions.h(mineshaft);
	}

	///
	// Global and Block Content Elements
	///

	:is(ol, ul):not([class]),
	.breadcrumbs {
		li {
			&::marker {
				color: functions.h(yeti);
			}
		}
	}

	figure > a figcaption,
	blockquote cite,
	.breadcrumbs,
	.fragment-anchor {
		color: functions.h(yeti);
	}

	.title:not(.title--positive, .title--negative) .p-name,
	.navigation__list a {
		@media not print {
			background-image: linear-gradient(to bottom, var(--color-snowy), var(--color-highland));
		}
	}

	///
	// Compositions
	///

	#{collections.$box},
	&.box {
		border-block-start-color: var(--box-border-color, functions.h(raven, alpha));

		#{collections.$anchor} {
			color: functions.h(highland);

			&:active {
				color: functions.h(snowy); // maintain contrast
			}
		}
	}
	.box--success {
		background-color: color-mix(in oklab, functions.h(mineshaft), functions.h(conifer) 10%);
		--box-border-color: #{functions.h(conifer)};
	}

	.box--warning {
		background-color: color-mix(in oklab, functions.h(mineshaft), functions.h(aspen) 10%);
		--box-border-color: #{functions.h(aspen)};
	}

	.box--error {
		background-color: color-mix(in oklab, functions.h(mineshaft), functions.h(maple) 10%);
		--box-border-color: #{functions.h(maple)};
	}

	.rating {
		--rating-background-color: #{functions.h(kaiser)};
	}

	.browse__previous,
	.browse__next {
		&:not(:hover, :focus, :active) {
			&::before {
				color: functions.h(yeti);
			}
		}
	}

	.table-of-contents {
		li {
			&::marker {
				color: functions.h(yeti);
			}
		}
	}

	.dark-invert-colors {
		filter: invert(1) hue-rotate(180deg);
	}

	// For some reason, ::selection and ::target-text don't play well together
	::selection {
		background-color: functions.h(highland);
		color: functions.h(mineshaft);
	}
	::target-text {
		background-color: functions.h(highland);
		color: functions.h(mineshaft);
	}
}
