////
/// Mixins
/// @group abstracts
////

@use "sass:map";
@use "../generated/tokens";

///
/// Visually hide an element properly.
///
@mixin visually-hidden() {
	inline-size: 1px !important;
	block-size: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	border: 0 !important;
	overflow: hidden !important;
	position: absolute !important;
	white-space: nowrap !important;
	clip: rect(0 0 0 0) !important;
	clip-path: inset(100%) !important;
}

///
/// Nest an inline-size-based container query.
///
@mixin cqi($name, $min: null, $max: null) {
	@if $min and $max {
		@container #{$name} (#{map.get(tokens.$breakpoints, $min)} < inline-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else if $max {
		@container #{$name} (inline-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else {
		@container #{$name} (inline-size > #{map.get(tokens.$breakpoints, $min)}) {
			@content;
		}
	}
}

///
/// Nest an block-size-based container query.
///
@mixin cqb($name, $min: null, $max: null) {
	@if $min and $max {
		@container #{$name} (#{map.get(tokens.$breakpoints, $min)} < block-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else if $max {
		@container #{$name} (block-size <= #{map.get(tokens.$breakpoints, $max)}) {
			@content;
		}
	} @else {
		@container #{$name} (block-size > #{map.get(tokens.$breakpoints, $min)}) {
			@content;
		}
	}
}

///
/// Italicise words
///
@mixin italic() {
	font-style: italic;
	font-synthesis: none;
	font-variation-settings: "ital" 125;
}
@mixin soft-italic() {
	font-style: italic;
	font-synthesis: none;
	font-variation-settings: "ital" 83;
}

///
/// Hyphenate words.
///
@mixin hyphenate() {
	hyphens: auto;
	hyphenate-limit-chars: 6 3 3;
	hyphenate-limit-lines: 2;
	hyphenate-limit-last: always;
	hyphenate-limit-zone: 8%;
}

///
/// Make something non-selectable.
///
@mixin non-selectable() {
	user-select: none;
	-webkit-touch-callout: default;
	-webkit-touch-callout: none;
}

///
/// Make something non-interactive.
///
@mixin non-interactive() {
	@include non-selectable;
	pointer-events: none;
}

///
/// Setup Monochrome Color CSS Variables
///
@mixin setup-monochrome-colors() {
	--color-snowy: oklch(var(--snowy-lightness) var(--monochrome-chroma) var(--monochrome-hue));
	--color-thunder: oklch(var(--thunder-lightness) var(--monochrome-chroma) var(--monochrome-hue));
	--color-mineshaft: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 83.6%);
	--color-kaiser: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 66.6%);
	--color-nickel: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 51.8%);
	--color-yeti: color-mix(in oklab, var(--color-snowy), var(--color-thunder) 10.2%);
}

///
/// Setup Raven Color CSS Variables
///
@mixin setup-raven-colors() {
	--color-raven: oklch(var(--raven-lightness) var(--raven-chroma) var(--raven-hue));
	--color-lynx: color-mix(in oklab, var(--color-raven), var(--color-thunder) 75%);
	--color-wolf: color-mix(in oklab, var(--color-raven), var(--color-thunder) 54%);
	--color-bowhead: color-mix(in oklab, var(--color-raven), var(--color-thunder) 33%);
	--color-highland: color-mix(in oklab, var(--color-raven), var(--color-snowy) 33%);
	--color-coyote: color-mix(in oklab, var(--color-raven), var(--color-snowy) 54%);
	--color-bear: color-mix(in oklab, var(--color-raven), var(--color-snowy) 75%);
}
