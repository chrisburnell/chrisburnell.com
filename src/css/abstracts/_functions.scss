////
/// Functions
/// @group abstracts
////

@use "sass:list";
@use "sass:math";

///
/// Remap a number from one range to another
/// @param {Number} $number - Initial Value
/// @param {Number} $ranges - 2/4 minimum/maximum values representing the ranges
/// @example scss
///   $variable: range-map(2, 4, 100);
///   // $variable: 50;
/// @example scss
///   $variable: range-map(68, 30, 160, 0, 100);
///   // $variable: 42.5;
/// @return {Number} Number re-mapped in new range
///
@function range-map($number, $ranges...) {
	@if not $number or not $ranges or not (list.length($ranges) == 2 or list.length($ranges) == 4) {
		@warn "`range-map()` requires three or five parameters: initial number, (old minimum), old maximum, (new minimum), and new maximum.";
		@return false;
	}

	$old-minimum: if(list.length($ranges) == 2, 0, list.nth($ranges, 1));
	$old-maximum: if(list.length($ranges) == 2, list.nth($ranges, 1), list.nth($ranges, 2));
	$new-minimum: if(list.length($ranges) == 2, 0, list.nth($ranges, 3));
	$new-maximum: if(list.length($ranges) == 2, list.nth($ranges, 2), list.nth($ranges, 4));

	@if $old-minimum >= $old-maximum {
		@warn "old maximum must be greater than old minimum";
		@return false;
	}
	@if $new-minimum >= $new-maximum {
		@warn "new maximum must be greater than new minimum";
		@return false;
	}
	@if $number < $old-minimum {
		@warn "initial number must be greater than old minimum";
		@return false;
	}
	@if $number > $old-maximum {
		@warn "initial number must be less than old maximum";
		@return false;
	}

	@return math.div($number - $old-minimum, $old-maximum - $old-minimum) * ($new-maximum - $new-minimum) + $new-minimum;
}
