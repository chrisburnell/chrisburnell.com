////
/// Dark
/// @group themes
////

@use "../abstracts/mixins";

@mixin dark-styles {
	& select {
		background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='50' fill='%23dddddd'><polygon points='0,0 100,0 50,50'/></svg>");
	}
	& .dark-invert-colors {
		filter: invert(1) hue-rotate(180deg);
	}
}

:where(:root) {
	color-scheme: light dark;

	@media print {
		color-scheme: light !important;
	}
}

:where(:root:has([name="color-scheme"] [value=""]:checked):not([data-color-scheme], .light, .dark)) {
	@media (prefers-color-scheme: dark) {
		@include dark-styles;
	}

	&:where(.suggested-light),
	& :where(.suggested-light) {
		color-scheme: light;
		color: light-dark(var(--color-kaiser), var(--color-yeti));
	}
	&:where(.suggested-dark),
	& :where(.suggested-dark) {
		color-scheme: dark;
		color: light-dark(var(--color-kaiser), var(--color-yeti));
		@include dark-styles;
	}
}

// Order of selector specificities below:
// 0,0,0
// 0,0,0
// 0,1,0

:where(:root:has([name="color-scheme"] [value="light"]:checked)),
:where([data-color-scheme="light"]),
.light {
	color-scheme: light;
	color: light-dark(var(--color-kaiser), var(--color-yeti));
}
:where(:root:has([name="color-scheme"] [value="dark"]:checked)),
:where([data-color-scheme="dark"]),
.dark {
	color-scheme: dark;
	color: light-dark(var(--color-kaiser), var(--color-yeti));
	@include dark-styles;
}
