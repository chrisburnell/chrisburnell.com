////
/// Pantheon
/// @group compositions
///
/// --indent-size (1fr OR 0)
///     Defines the inline-size of the aside.
/// --indent-gap (var(--size-gap) OR 0)
///     Defines the gap between the indent and content column.
/// --columns (6 Ã— 1fr)
///     Defines how many sub-columns should make up the content column.
/// --outdent-gap (var(--size-gap) OR 0)
///     Defines the gap between the content and outdent column.
/// --outdent-size (1fr OR 0)
///     Defines the inline-size of the outdent.
////

@use "../abstracts/mixins";

.pantheon {
	display: grid;
	align-items: start;
	grid-template-rows:
		[breadcrumbs-start]
		auto
		[breadcrumbs-end context-start]
		auto
		[context-end title-start]
		auto
		[title-end sparkline-start]
		auto
		[sparkline-end description-start]
		auto
		[description-end toc-start]
		auto
		[toc-end content-start]
		auto
		[content-end responses-start]
		auto
		[responses-end meta-start]
		auto
		[meta-end browse-start]
		auto
		[browse-end];
	grid-template-columns:
		[indent-start]
		var(--indent-size, 0)
		[indent-end]
		var(--indent-gap, 0)
		[content-start content-left-start]
		repeat(var(--columns, 3), 1fr)
		[content-left-end content-right-start]
		repeat(var(--columns, 3), 1fr)
		[content-right-end content-end]
		var(--outdent-gap, 0)
		[outdent-start]
		var(--outdent-size, 0)
		[outdent-end];

	&:not(.full) {
		// Only show indent & outdent above medium on non-full-inline-size
		// pages. This effeectively shortens the inline-size of the content.
		@include mixins.cqi(null, "medium") {
			--indent-size: 1fr;
			--indent-gap: var(--size-gap);
			--outdent-gap: var(--size-gap);
			--outdent-size: 1fr;
		}
	}

	&:has(.toc) {
		@include mixins.cqi(null, "large") {
			@media screen {
				--indent-size: var(--size-aside);
				--outdent-gap: 0;
				--outdent-size: 0;
			}
		}
	}

	@media print {
		display: block;
	}
}

.breadcrumbs {
	grid-row: breadcrumbs;
	grid-column: indent / outdent;
}
@include mixins.cqi(null, "medium") {
	.pantheon:has(> svg-sparkline) {
		.breadcrumbs {
			grid-column: indent / content-left;
			align-self: center;
		}
	}
}

.pantheon > svg-sparkline {
	grid-row: sparkline;
	grid-column: indent / outdent;
	margin-block-start: var(--size-small);

	@include mixins.cqi(null, "small") {
		justify-self: center;
	}
}
@include mixins.cqi(null, "medium") {
	.pantheon:has(> .breadcrumbs) {
		& > svg-sparkline {
			grid-row: breadcrumbs;
			grid-column: content-right / outdent;
			justify-self: end;
			margin-block-start: var(--size-gap);
		}
	}
}

.context {
	grid-row: context;
	grid-column: content;
}

.title {
	grid-row: title;
	grid-column: indent / outdent;
}

.description {
	grid-row: description;
	grid-column: content;
}

.toc {
	grid-column: content;
	grid-row: toc;

	@include mixins.cqi(null, "large") {
		grid-column: indent;
		grid-row: description / content;
	}
}

.content {
	grid-row: content;
	grid-column: content;
}

.responses {
	grid-row: responses;
	grid-column: indent / outdent;
}

.meta {
	grid-row: meta;
	grid-column: indent / outdent;
}

.browse {
	grid-row: browse;
	grid-column: indent / outdent;
}
