////
/// Auto Grid
/// @group compositions
///
/// --placement (auto-fill)
///     Set either auto-fit or auto-fill to change how empty grid tracks are
///     handled.
/// --column-gap (var(--size-gutter))
///     Defines the space between each column.
/// --row-gap (var(--size-gutter))
///     Defines the space between each row.
/// --gap (var(--size-gutter))
///     Defines the space between each column and row if the above are not set.
/// --grid-min-inline-size (10rem)
///     Defines how wide each item should be, ideally, as a minimum.
/// --grid-max-inline-size (1fr)
///     Defines how wide each item should be, ideally, as a maximum.
////

@use "../generated/tokens";

.grid,
%grid {
	display: grid;
	// prettier-ignore
	grid-template-columns: repeat(
		var(--placement, auto-fill),
		minmax(
			var(--grid-min-inline-size, 12em),
			var(--grid-max-inline-size, 1fr)
		)
	);
	column-gap: var(--column-gap, var(--gap, var(--size-gutter)));
	row-gap: var(--row-gap, var(--gap, var(--size-gutter)));

	&[data-rows="masonry"] {
		grid-template-rows: masonry;
		align-items: start;
	}

	&[data-layout*="50-50"] {
		--placement: auto-fit;
	}
	&[data-layout="50-50"] {
		--grid-min-inline-size: clamp(8rem, 50% - var(--column-gap, var(--gap, var(--size-gutter))), 16rem);
	}

	@each $name, $value in tokens.$breakpoints {
		&[data-layout="50-50-#{$name}"] {
			@apply --inline-below(var(--size-breakpoint-#{$name})) {
				--grid-min-inline-size: 100%;
			}
			@apply --inline-above(var(--size-breakpoint-#{$name})) {
				--grid-min-inline-size: clamp(8rem, 50% - var(--column-gap, var(--gap, var(--size-gutter))), 16rem);
			}
		}
	}

	&[data-layout="natural"] {
		display: flex;
		flex-wrap: wrap;
		align-items: first baseline;

		& > * {
			flex: 0 1 var(--inline-size, auto);
		}
	}

	& .full-span {
		grid-column: 1 / -1;
	}
}
