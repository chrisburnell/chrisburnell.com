---
date: 2023-04-11T18:00:00+01:00
updated: 2023-10-01T19:06:47+01:00
title: "NewBase60 Calculator"
description: "Web-based tool for using NewBase60 to convert between binary, decimal, sexagesimal, and date."
tags:
  - calculator
emoji: üï∞Ô∏è
---

<noscript><p class=" [ box  box--error ] ">Unfortunately, this calculator requires JavaScript to function correctly!</p></noscript>

<!-- </textarea> -->
<!-- '"¬¥ -->
<form id="converter" class=" [ grid ] " style="--placement: auto-fit;">
	<fieldset>
		<label for="binary" class=" [ delta ] ">Binary</label>
		<input id="binary" class=" [ center  monospace ] " style="inline-size: 100%; line-height: 3;" type="text" inputmode="numeric" pattern="^[0-1]+$" lang="en" value="100011000100111"></input>
	</fieldset>
	<fieldset>
		<label for="decimal" class=" [ delta ] ">Decimal</label>
		<input id="decimal" class=" [ center  monospace ] " style="inline-size: 100%; line-height: 3;" type="number" min="0" inputmode="numeric" pattern="^[0-9]+$" lang="en" value="17959"></input>
	</fieldset>
	<fieldset>
		<label for="sexagesimal" class=" [ delta ] ">Sexagesimal</label>
		<input id="sexagesimal" class=" [ center  monospace ] " style="inline-size: 100%; line-height: 3;" type="text" pattern="^[0-9ABCDEFGHJKLMNPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz]+$" lang="en" value="4zK"></input>
	</fieldset>
	<fieldset>
		<label for="date" class=" [ delta ] [ non-interactive ] ">Date <small>(non-interactive)</small></label>
		<input id="date" class=" [ center  monospace ] [ non-interactive ] " style="inline-size: 100%; line-height: 3;" type="text" value="4 March 2019" readonly></input>
	</fieldset>
</form>

<h2 id="how">How does this work?</h2>

<p>I‚Äôve gone into detail about what‚Äôs going on here in my article, <a href="/article/automatic-shorturls/">Generating Automatic ShortURLs with NewBase60</a>.</p>

{% js 'module' -%}
/**
 * NewBase60 Calculator
 * @class
 */
class NewBase60Calculator {
	/**
	 * @constructor
	 */
	constructor() {
		this.SEQUENCE = "0123456789ABCDEFGHJKLMNPQRSTUVWXYZ_abcdefghijkmnopqrstuvwxyz"
		this.inputs = {
			decimal: null,
			binary: null,
			sexagesimal: null,
		}
		this.dateFormatter = new Intl.DateTimeFormat("en-GB", { dateStyle: "long" })

		this.init()
	}

	/**
	 * @param {Number} value
	 * @returns {String}
	 */
	DecimalToSexagesimal(value) {
		if (value === undefined || value === 0) {
			return 0
		}
		let sexagesimalValue = ""
		while (value > 0) {
			let index = value % 60
			sexagesimalValue = this.SEQUENCE[index] + sexagesimalValue
			value = (value - index) / 60
		}
		return sexagesimalValue
	}

	/**
	 * @param {String} value
	 * @returns {Number}
	 */
	SexagesimalToDecimal(value) {
		let output = 0
		for (var i = 0; i < value.length; i++) {
			let c = value[i].charCodeAt(0)
			if (c >= 48 && c <= 57) {
				c = c - 48
			} else if (c >= 65 && c <= 72) {
				c -= 55
			} else if (c == 73 || c == 108) {
				c = 1
			} else if (c >= 74 && c <= 78) {
				c -= 56
			} else if (c == 79) {
				c = 0
			} else if (c >= 80 && c <= 90) {
				c -= 57
			} else if (c == 95) {
				c = 34
			} else if (c >= 97 && c <= 107) {
				c -= 62
			} else if (c >= 109 && c <= 122) {
				c -= 63
			} else {
				c = 0
			}
			output = 60 * output + c
		}
		return output
	}

	/**
	 * @param {Number} value
	 * @returns {DateTime}
	 */
	DecimalToDate(value) {
		let dateObject = new Date(parseInt(value) * 86400 * 1000)
		return this.dateFormatter.format(dateObject)
	}

	/**
	 * Calculates other units from binary input.
	 */
	convertFromBinary() {
		if (new RegExp(this.binary.getAttribute("pattern")).test(this.binary.value)) {
			this.decimal.value = parseInt(this.binary.value, 2)
			this.sexagesimal.value = this.DecimalToSexagesimal(parseInt(this.decimal.value))
			this.date.value = this.DecimalToDate(this.decimal.value)
		}
	}

	/**
	 * Calculates other units from decimal input.
	 */
	convertFromDecimal() {
		if (new RegExp(this.decimal.getAttribute("pattern")).test(this.decimal.value)) {
			this.binary.value = (parseInt(this.decimal.value) >>> 0).toString(2)
			this.sexagesimal.value = this.DecimalToSexagesimal(parseInt(this.decimal.value))
			this.date.value = this.DecimalToDate(this.decimal.value)
		}
	}

	/**
	 * Calculates other units from sexagesimal input.
	 */
	convertFromSexagesimal() {
		if (new RegExp(this.sexagesimal.getAttribute("pattern")).test(this.sexagesimal.value)) {
			this.decimal.value = this.SexagesimalToDecimal(this.sexagesimal.value)
			this.binary.value = (parseInt(this.decimal.value) >>> 0).toString(2)
			this.date.value = this.DecimalToDate(this.decimal.value)
		}
	}

	/**
	 * Attach event listeners to the form.
	 */
	init() {
		this.decimal = document.getElementById("decimal")
		this.binary = document.getElementById("binary")
		this.sexagesimal = document.getElementById("sexagesimal")
		this.date = document.getElementById("date")

		this.decimal.addEventListener("blur", () => {
			this.convertFromDecimal()
		})
		this.decimal.addEventListener("input", () => {
			this.convertFromDecimal()
		})

		this.binary.addEventListener("blur", () => {
			this.convertFromBinary()
		})
		this.binary.addEventListener("input", () => {
			this.convertFromBinary()
		})

		this.sexagesimal.addEventListener("blur", () => {
			this.convertFromSexagesimal()
		})
		this.sexagesimal.addEventListener("input", () => {
			this.convertFromSexagesimal()
		})

		// Set calculator to current day since epoch
		const now = new Date()
		const daysSinceEpoch = Math.floor(now / 8.64e7)
		this.decimal.value = daysSinceEpoch
		this.convertFromDecimal()
	}
}

if ("HTMLElement" in window) {
	/**
	 * @type {NewBase60Calculator}
	 */
	window.NewBase60Calculator = new NewBase60Calculator()
}

/**
 * @type {NewBase60Calculator}
 */
export default NewBase60Calculator
{%- endjs %}
